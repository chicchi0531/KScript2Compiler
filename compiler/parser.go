// Code generated by goyacc -o compiler/parser.go compiler/parser.go.y. DO NOT EDIT.

//line compiler/parser.go.y:1

// プログラムのヘッダを指定
package compiler

import __yyfmt__ "fmt"

//line compiler/parser.go.y:4

import (
	"fmt"
	"ks2/compiler/ast"
	cm "ks2/compiler/common"
	"ks2/compiler/vm"
)

var driver *vm.Driver
var lexer *Lexer

//line compiler/parser.go.y:17
type yySymType struct {
	yys  int
	ival int
	fval float32
	sval string

	node  vm.INode
	nodes []vm.INode

	argList  []*vm.Argument
	argument *vm.Argument

	stateBlock     vm.IStateBlock
	statement      vm.IStatement
	caseStatement  *ast.CaseStatement
	caseStatements []*ast.CaseStatement
}

const INUM = 57346
const FNUM = 57347
const IDENTIFIER = 57348
const STRING_LITERAL = 57349
const PLUS = 57350
const MINUS = 57351
const ASTARISK = 57352
const SLASH = 57353
const PERCENT = 57354
const P_EQ = 57355
const M_EQ = 57356
const A_EQ = 57357
const S_EQ = 57358
const MOD_EQ = 57359
const EQ = 57360
const NEQ = 57361
const GT = 57362
const GE = 57363
const LT = 57364
const LE = 57365
const AND = 57366
const OR = 57367
const INCR = 57368
const DECR = 57369
const ASSIGN = 57370
const VAR = 57371
const INT = 57372
const FLOAT = 57373
const STRING = 57374
const VOID = 57375
const IF = 57376
const ELSE = 57377
const SWITCH = 57378
const CASE = 57379
const DEFAULT = 57380
const FALLTHROUGH = 57381
const FOR = 57382
const BREAK = 57383
const CONTINUE = 57384
const FUNC = 57385
const RETURN = 57386
const IMPORT = 57387
const TYPE = 57388
const STRUCT = 57389
const SYSCALL = 57390
const EOL = 57391
const NEG = 57392

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"INUM",
	"FNUM",
	"IDENTIFIER",
	"STRING_LITERAL",
	"PLUS",
	"MINUS",
	"ASTARISK",
	"SLASH",
	"PERCENT",
	"P_EQ",
	"M_EQ",
	"A_EQ",
	"S_EQ",
	"MOD_EQ",
	"EQ",
	"NEQ",
	"GT",
	"GE",
	"LT",
	"LE",
	"AND",
	"OR",
	"INCR",
	"DECR",
	"ASSIGN",
	"VAR",
	"INT",
	"FLOAT",
	"STRING",
	"VOID",
	"IF",
	"ELSE",
	"SWITCH",
	"CASE",
	"DEFAULT",
	"FALLTHROUGH",
	"FOR",
	"BREAK",
	"CONTINUE",
	"FUNC",
	"RETURN",
	"IMPORT",
	"TYPE",
	"STRUCT",
	"SYSCALL",
	"EOL",
	"'('",
	"')'",
	"'{'",
	"'}'",
	"'['",
	"']'",
	"','",
	"':'",
	"';'",
	"'.'",
	"NEG",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line compiler/parser.go.y:297

func Parse(filename string, source string) int {

	err := &cm.ErrorHandler{ErrorCount: 0, WarningCount: 0}
	driver = new(vm.Driver)
	driver.Init(filename, err)

	// パース処理
	lexer = &Lexer{src: source, position: 0, readPosition: 0, line: 1, filename: filename, err: err}
	yyParse(lexer)

	// ラベル設定
	driver.LabelSettings()

	fmt.Println("Parse End.")

	// パース結果出力
	driver.Dump()

	return 0
}

// 外部用
func GetErrorCount() int {
	return driver.Err.ErrorCount
}
func GetWarningCount() int {
	return driver.Err.WarningCount
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 80,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 80,
	-1, 81,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 81,
	-1, 82,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 82,
	-1, 83,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 83,
	-1, 84,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 84,
	-1, 85,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 85,
	-1, 107,
	49, 32,
	52, 32,
	-2, 73,
	-1, 111,
	49, 37,
	-2, 74,
}

const yyPrivate = 57344

const yyLast = 583

var yyAct = [...]int{
	118, 35, 72, 97, 146, 36, 17, 94, 181, 101,
	89, 93, 96, 158, 108, 109, 164, 198, 19, 20,
	21, 185, 175, 122, 27, 74, 31, 123, 123, 28,
	43, 29, 70, 68, 66, 182, 192, 69, 67, 197,
	156, 73, 165, 39, 40, 119, 38, 112, 33, 16,
	71, 189, 75, 76, 77, 78, 79, 80, 81, 82,
	83, 84, 85, 86, 87, 73, 7, 167, 120, 90,
	91, 92, 19, 20, 21, 107, 19, 20, 21, 111,
	182, 121, 149, 150, 151, 152, 153, 42, 172, 37,
	64, 65, 7, 25, 154, 107, 30, 148, 24, 111,
	18, 127, 19, 20, 21, 39, 40, 41, 38, 174,
	33, 139, 23, 140, 142, 15, 14, 145, 50, 68,
	95, 3, 3, 147, 155, 11, 12, 13, 143, 144,
	26, 2, 9, 10, 169, 39, 40, 119, 38, 6,
	33, 49, 5, 157, 4, 159, 8, 161, 162, 42,
	1, 37, 7, 45, 46, 47, 48, 90, 22, 168,
	106, 163, 105, 104, 103, 173, 102, 166, 100, 99,
	176, 98, 190, 184, 179, 186, 183, 177, 141, 42,
	107, 37, 187, 193, 194, 34, 32, 44, 191, 196,
	0, 188, 195, 0, 51, 52, 53, 54, 55, 0,
	107, 107, 107, 107, 111, 111, 111, 111, 127, 127,
	200, 201, 64, 65, 0, 0, 0, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 51, 52,
	53, 54, 55, 0, 0, 0, 0, 0, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 51, 52,
	53, 54, 55, 0, 0, 0, 0, 0, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 149, 150,
	151, 152, 153, 0, 0, 0, 0, 0, 178, 0,
	0, 170, 0, 148, 0, 0, 0, 0, 0, 0,
	180, 51, 52, 53, 54, 55, 0, 199, 0, 0,
	0, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 51, 52, 53, 54, 55, 0, 0, 0, 0,
	0, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 51, 52, 53, 54, 55, 0, 0, 171, 0,
	0, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 39, 40, 119, 38, 0, 33, 0, 125, 0,
	0, 0, 0, 53, 54, 55, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 120, 0, 124, 64,
	65, 112, 0, 116, 0, 0, 117, 113, 114, 115,
	0, 110, 0, 0, 0, 42, 7, 37, 0, 0,
	126, 51, 52, 53, 54, 55, 0, 0, 0, 0,
	0, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 51, 52, 53, 54, 55, 0, 0, 0, 0,
	0, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 0, 0, 0, 0, 160, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 51, 52, 53, 54,
	55, 0, 0, 0, 0, 73, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 39, 40, 119, 38,
	0, 33, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	0, 120, 0, 0, 0, 0, 112, 0, 116, 0,
	0, 117, 113, 114, 115, 0, 110, 0, 0, 0,
	42, 7, 37, 51, 52, 53, 54, 55, 0, 0,
	0, 0, 0, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 51, 52, 53, 54, 55, 0, 0,
	0, 0, 0, 56, 57, 58, 59, 60, 61, 62,
	0, 64, 65, 51, 52, 53, 54, 55, 0, 0,
	0, 0, 0, 56, 57, 58, 59, 60, 61, 0,
	0, 64, 65,
}

var yyPact = [...]int{
	103, 103, -1000, -1000, 17, 17, 17, -1000, 110, 109,
	-1000, -1000, -1000, -1000, -1, 46, 92, 65, 126, -1000,
	-1000, -1000, -27, -1000, 42, 101, -25, 123, 92, -1000,
	114, 515, -1000, 101, -1000, -1000, -1000, 101, -1000, -1000,
	-1000, -17, -22, 72, -11, -1000, -1000, -1000, -1000, -1000,
	-30, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, -1000, -1000, -1000, 448, 101, 101,
	101, -1000, -1000, 472, 72, 353, 353, 64, 64, 64,
	186, 186, 186, 186, 186, 186, 555, 535, -1000, -28,
	515, 323, 303, 347, -1000, -1000, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, -1000, -1000, -1000,
	101, -1000, 101, 39, -1000, -1000, 101, -1000, 515, 69,
	88, -1000, -1000, 101, -1000, -10, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 515,
	413, -45, 413, -1000, -1000, 393, 101, 101, -1000, -1000,
	-1000, -1000, -1000, -1000, -12, 515, 101, 32, 101, -1000,
	17, 515, 283, 60, 101, 105, -29, 13, 220, 43,
	-1000, 255, 101, 515, -34, -1000, -1000, -1000, 131, -2,
	-1000, -1000, 101, 101, 515, 72, -11, -1000, -1000, -1000,
	-14, -1000, -40, 240, 515, -1000, -1000, -1000, 472, 472,
	472, 472,
}

var yyPgo = [...]int{
	0, 6, 187, 4, 0, 186, 15, 5, 1, 14,
	185, 178, 175, 8, 174, 172, 11, 7, 12, 3,
	171, 169, 168, 2, 9, 166, 164, 163, 162, 160,
	112, 158, 10, 150, 131, 120, 144, 142, 139, 134,
}

var yyR1 = [...]int{
	0, 33, 33, 34, 34, 34, 34, 37, 37, 37,
	38, 36, 31, 31, 31, 30, 30, 23, 16, 16,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 18, 19, 20, 21, 21, 22, 24, 24,
	24, 11, 11, 12, 12, 25, 25, 26, 27, 28,
	28, 39, 39, 14, 14, 13, 15, 29, 3, 3,
	3, 3, 3, 3, 9, 9, 6, 6, 6, 6,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 8,
	8, 7, 7, 10, 10, 32, 32, 32, 5, 5,
	5, 1, 1, 1, 2, 2, 2, 2, 2, 35,
}

var yyR2 = [...]int{
	0, 1, 2, 1, 2, 2, 2, 3, 5, 6,
	6, 7, 0, 1, 3, 2, 5, 3, 1, 2,
	1, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 2, 1, 3, 5,
	5, 1, 1, 1, 1, 7, 3, 1, 1, 6,
	7, 1, 2, 1, 2, 4, 3, 1, 1, 1,
	1, 1, 1, 1, 3, 6, 3, 5, 4, 6,
	1, 2, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 4, 7, 1, 4, 0, 1, 3, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -33, -34, -35, -36, -37, -38, 49, 43, 29,
	-34, -35, -35, -35, 6, 6, 50, -1, 54, 30,
	31, 32, -31, -30, 6, 28, 4, 51, 56, -1,
	54, -4, -5, 9, -10, -8, -7, 50, 7, 4,
	5, 6, 48, 55, -2, 30, 31, 32, 33, -30,
	4, 8, 9, 10, 11, 12, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, -4, -4, 50, 54,
	54, -1, -23, 52, 55, -4, -4, -4, -4, -4,
	-4, -4, -4, -4, -4, -4, -4, -4, 51, -32,
	-4, -4, -4, -16, -17, -35, -18, -19, -20, -21,
	-22, -24, -25, -26, -27, -28, -29, -8, -9, -6,
	44, -7, 34, 40, 41, 42, 36, 39, -4, 6,
	29, -1, 51, 56, 55, 55, 53, -17, -35, -35,
	-35, -35, -35, -35, -35, -35, -35, -35, -35, -4,
	-4, -11, -4, -9, -6, -4, -3, 54, 28, 13,
	14, 15, 16, 17, 6, -4, 50, -23, 58, -23,
	52, -4, -4, -1, 28, 54, -32, 35, -4, -39,
	-35, 55, 28, -4, 4, 51, -23, -24, 58, -14,
	-35, -13, 37, -3, -4, 55, -12, -19, -18, 53,
	-15, -13, 38, -4, -4, -1, -23, 53, 57, 57,
	-16, -16,
}

var yyDef = [...]int{
	0, -2, 1, 3, 0, 0, 0, 109, 0, 0,
	2, 4, 5, 6, 0, 0, 12, 7, 0, 101,
	102, 103, 0, 13, 0, 0, 0, 104, 0, 15,
	0, 8, 70, 0, 72, 73, 74, 0, 98, 99,
	100, 93, 0, 0, 10, 105, 106, 107, 108, 14,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 90, 71, 0, 95, 0,
	0, 9, 11, 0, 0, 75, 76, 77, 78, 79,
	-2, -2, -2, -2, -2, -2, 86, 87, 88, 0,
	96, 0, 0, 0, 18, 20, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -2, 33, 34,
	35, -2, 0, 0, 47, 48, 0, 57, 0, 93,
	0, 16, 91, 0, 94, 0, 17, 19, 21, 22,
	23, 24, 25, 26, 27, 28, 29, 30, 31, 36,
	0, 0, 0, 41, 42, 0, 0, 0, 58, 59,
	60, 61, 62, 63, 0, 97, 95, 38, 0, 46,
	0, 64, 0, 66, 0, 0, 0, 0, 0, 0,
	51, 94, 0, 68, 0, 92, 39, 40, 0, 0,
	52, 53, 0, 0, 67, 0, 0, 43, 44, 49,
	0, 54, 0, 0, 65, 69, 45, 50, 0, 0,
	56, 55,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	50, 51, 3, 3, 56, 3, 59, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 57, 58,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 54, 3, 55, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 52, 3, 53,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 60,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:106
		{
			driver.VariableTable.DefineValue(lexer.line, yyDollar[2].sval, yyDollar[3].ival, false, 1)
		}
	case 8:
		yyDollar = yyS[yypt-5 : yypt+1]
//line compiler/parser.go.y:107
		{
			driver.Err.LogError(driver.Filename, lexer.line, cm.ERR_0026, "")
		}
	case 9:
		yyDollar = yyS[yypt-6 : yypt+1]
//line compiler/parser.go.y:108
		{
			driver.VariableTable.DefineValue(lexer.line, yyDollar[2].sval, yyDollar[6].ival, false, yyDollar[4].ival)
		}
	case 10:
		yyDollar = yyS[yypt-6 : yypt+1]
//line compiler/parser.go.y:111
		{
			driver.DecralateFunction(lexer.line, yyDollar[6].ival, yyDollar[2].sval, yyDollar[4].argList)
		}
	case 11:
		yyDollar = yyS[yypt-7 : yypt+1]
//line compiler/parser.go.y:114
		{
			driver.AddFunction(lexer.line, yyDollar[6].ival, yyDollar[2].sval, yyDollar[4].argList, yyDollar[7].statement)
		}
	case 12:
		yyDollar = yyS[yypt-0 : yypt+1]
//line compiler/parser.go.y:117
		{
			yyVAL.argList = make([]*vm.Argument, 0)
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:118
		{
			yyVAL.argList = []*vm.Argument{yyDollar[1].argument}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:119
		{
			yyVAL.argList = append(yyDollar[1].argList, yyDollar[3].argument)
		}
	case 15:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:122
		{
			yyVAL.argument = &vm.Argument{Name: yyDollar[1].sval, VarType: yyDollar[2].ival, IsPointer: false, Size: 1}
		}
	case 16:
		yyDollar = yyS[yypt-5 : yypt+1]
//line compiler/parser.go.y:123
		{
			yyVAL.argument = &vm.Argument{Name: yyDollar[1].sval, VarType: yyDollar[5].ival, IsPointer: false, Size: yyDollar[3].ival}
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:129
		{
			yyVAL.statement = ast.MakeCompoundStatement(yyDollar[2].stateBlock)
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:132
		{
			s := new(ast.StateBlock)
			yyVAL.stateBlock = s.AddStates(yyDollar[1].statement)
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:133
		{
			yyVAL.stateBlock = yyDollar[1].stateBlock.AddStates(yyDollar[2].statement)
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:136
		{
			yyVAL.statement = nil
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:137
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:138
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:139
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:140
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:141
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:142
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 27:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:143
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:144
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 29:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:145
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:146
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 31:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:147
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:150
		{
			yyVAL.statement = ast.MakeExprStatement(yyDollar[1].node, driver)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:153
		{
			yyVAL.statement = ast.MakeAssignStatement(yyDollar[1].node)
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:156
		{
			yyVAL.statement = ast.MakeVarDefineStatement(yyDollar[1].node)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:159
		{
			yyVAL.statement = ast.MakeReturnStatement(nil, lexer.line, driver)
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:160
		{
			yyVAL.statement = ast.MakeReturnStatement(yyDollar[2].node, lexer.line, driver)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:163
		{
			yyVAL.statement = ast.MakeFunctionCallStatement(yyDollar[1].node, driver)
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:166
		{
			yyVAL.statement = ast.MakeIfStatement(yyDollar[2].node, yyDollar[3].statement, nil, lexer.line, driver)
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line compiler/parser.go.y:167
		{
			yyVAL.statement = ast.MakeIfStatement(yyDollar[2].node, yyDollar[3].statement, yyDollar[5].statement, lexer.line, driver)
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line compiler/parser.go.y:168
		{
			yyVAL.statement = ast.MakeIfStatement(yyDollar[2].node, yyDollar[3].statement, yyDollar[5].statement, lexer.line, driver)
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line compiler/parser.go.y:179
		{
			yyVAL.statement = ast.MakeForStatement(yyDollar[2].node, yyDollar[4].node, yyDollar[6].statement, yyDollar[7].statement, lexer.line, driver)
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:180
		{
			yyVAL.statement = ast.MakeWhileStatement(yyDollar[2].node, yyDollar[3].statement, lexer.line, driver)
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:183
		{
			yyVAL.statement = ast.MakeBreakStatement(lexer.line, driver)
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:186
		{
			yyVAL.statement = ast.MakeContinueStatement(lexer.line, driver)
		}
	case 49:
		yyDollar = yyS[yypt-6 : yypt+1]
//line compiler/parser.go.y:189
		{
			yyVAL.statement = ast.MakeSwitchStatement(yyDollar[2].node, yyDollar[5].caseStatements, nil, lexer.line, driver)
		}
	case 50:
		yyDollar = yyS[yypt-7 : yypt+1]
//line compiler/parser.go.y:190
		{
			yyVAL.statement = ast.MakeSwitchStatement(yyDollar[2].node, yyDollar[5].caseStatements, yyDollar[6].statement, lexer.line, driver)
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:197
		{
			yyVAL.caseStatements = []*ast.CaseStatement{yyDollar[1].caseStatement}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:198
		{
			yyVAL.caseStatements = append(yyDollar[1].caseStatements, yyDollar[2].caseStatement)
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line compiler/parser.go.y:201
		{
			yyVAL.caseStatement = ast.MakeCaseStatement(yyDollar[2].node, ast.MakeCompoundStatement(yyDollar[4].stateBlock), lexer.line, driver)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:204
		{
			yyVAL.statement = ast.MakeCompoundStatement(yyDollar[3].stateBlock)
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:207
		{
			yyVAL.statement = ast.MakeFallThroughStatement(lexer.line, driver)
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:214
		{
			yyVAL.ival = ast.OP_ASSIGN
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:215
		{
			yyVAL.ival = ast.OP_ADD_ASSIGN
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:216
		{
			yyVAL.ival = ast.OP_SUB_ASSIGN
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:217
		{
			yyVAL.ival = ast.OP_MUL_ASSIGN
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:218
		{
			yyVAL.ival = ast.OP_DIV_ASSIGN
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:219
		{
			yyVAL.ival = ast.OP_MOD_ASSIGN
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:223
		{
			varNode := ast.MakeValueNode(lexer.line, yyDollar[1].sval, driver)
			yyVAL.node = ast.MakeAssign(lexer.line, varNode, yyDollar[3].node, yyDollar[2].ival, driver)
		}
	case 65:
		yyDollar = yyS[yypt-6 : yypt+1]
//line compiler/parser.go.y:228
		{
			varNode := ast.MakeArrayValueNode(lexer.line, yyDollar[1].sval, yyDollar[3].node, driver)
			yyVAL.node = ast.MakeAssign(lexer.line, varNode, yyDollar[6].node, yyDollar[5].ival, driver)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:234
		{
			yyVAL.node = ast.MakeVarDefineNode(lexer.line, yyDollar[2].sval, yyDollar[3].ival, false, 1, driver)
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line compiler/parser.go.y:235
		{
			yyVAL.node = ast.MakeVarDefineNodeWithAssign(lexer.line, yyDollar[2].sval, yyDollar[3].ival, yyDollar[5].node, driver)
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line compiler/parser.go.y:236
		{
			yyVAL.node = ast.MakeVarDefineNodeWithAssign(lexer.line, yyDollar[2].sval, cm.TYPE_UNKNOWN, yyDollar[4].node, driver)
		}
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
//line compiler/parser.go.y:237
		{
			yyVAL.node = ast.MakeVarDefineNode(lexer.line, yyDollar[2].sval, yyDollar[6].ival, false, yyDollar[4].ival, driver)
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:241
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[2].node, nil, ast.OP_NOT, driver)
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:242
		{
			yyVAL.node = yyDollar[1].node
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:243
		{
			yyVAL.node = yyDollar[1].node
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:244
		{
			yyVAL.node = yyDollar[1].node
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:245
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_ADD, driver)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:246
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_SUB, driver)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:247
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_MUL, driver)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:248
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_DIV, driver)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:249
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_MOD, driver)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:250
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_EQUAL, driver)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:251
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_NEQ, driver)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:252
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_GT, driver)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:253
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_GE, driver)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:254
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_LT, driver)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:255
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_LE, driver)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:256
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_AND, driver)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:257
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_OR, driver)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:258
		{
			yyVAL.node = yyDollar[2].node
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:261
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, nil, ast.OP_INCR, driver)
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:262
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, nil, ast.OP_DECR, driver)
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line compiler/parser.go.y:265
		{
			yyVAL.node = ast.MakeFunctionNode(lexer.line, yyDollar[1].sval, yyDollar[3].nodes, driver)
		}
	case 92:
		yyDollar = yyS[yypt-7 : yypt+1]
//line compiler/parser.go.y:266
		{
			yyVAL.node = ast.MakeSysCallNode(lexer.line, yyDollar[3].node, yyDollar[6].nodes, driver)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:269
		{
			yyVAL.node = ast.MakeValueNode(lexer.line, yyDollar[1].sval, driver)
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line compiler/parser.go.y:270
		{
			yyVAL.node = ast.MakeArrayValueNode(lexer.line, yyDollar[1].sval, yyDollar[3].node, driver)
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
//line compiler/parser.go.y:273
		{
			yyVAL.nodes = make([]vm.INode, 0)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:274
		{
			yyVAL.nodes = []vm.INode{yyDollar[1].node}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:275
		{
			yyVAL.nodes = append(yyDollar[1].nodes, yyDollar[3].node)
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:278
		{
			yyVAL.node = ast.MakeSvalNode(lexer.line, yyDollar[1].sval, driver)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:279
		{
			yyVAL.node = ast.MakeIvalNode(lexer.line, yyDollar[1].ival, driver)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:280
		{
			yyVAL.node = ast.MakeFvalNode(lexer.line, yyDollar[1].fval, driver)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:283
		{
			yyVAL.ival = cm.TYPE_INTEGER
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:284
		{
			yyVAL.ival = cm.TYPE_FLOAT
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:285
		{
			yyVAL.ival = cm.TYPE_STRING
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
//line compiler/parser.go.y:288
		{
			yyVAL.ival = cm.TYPE_VOID
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:289
		{
			yyVAL.ival = cm.TYPE_INTEGER
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:290
		{
			yyVAL.ival = cm.TYPE_FLOAT
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:291
		{
			yyVAL.ival = cm.TYPE_STRING
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:292
		{
			yyVAL.ival = cm.TYPE_VOID
		}
	}
	goto yystack /* stack new state and value */
}
