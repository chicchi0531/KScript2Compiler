// Code generated by goyacc -o compiler/parser.go compiler/parser.go.y. DO NOT EDIT.

//line compiler/parser.go.y:2
// プログラムのヘッダを指定
package compiler

import __yyfmt__ "fmt"

//line compiler/parser.go.y:3

import (
	"fmt"
	"ks2/compiler/ast"
	cm "ks2/compiler/common"
	"ks2/compiler/vm"
)

var driver *vm.Driver
var lexer *Lexer

//line compiler/parser.go.y:17
type yySymType struct {
	yys  int
	ival int
	fval float32
	sval string

	node       vm.INode
	nodes      []vm.INode
	argList    []*vm.Argument
	argument   *vm.Argument
	stateBlock vm.IStateBlock
}

const INUM = 57346
const FNUM = 57347
const IDENTIFIER = 57348
const STRING_LITERAL = 57349
const PLUS = 57350
const MINUS = 57351
const ASTARISK = 57352
const SLASH = 57353
const PERCENT = 57354
const P_EQ = 57355
const M_EQ = 57356
const A_EQ = 57357
const S_EQ = 57358
const EQ = 57359
const NEQ = 57360
const GT = 57361
const GE = 57362
const LT = 57363
const LE = 57364
const AND = 57365
const OR = 57366
const INCR = 57367
const DECR = 57368
const ASSIGN = 57369
const VAR = 57370
const INT = 57371
const FLOAT = 57372
const STRING = 57373
const VOID = 57374
const IF = 57375
const ELSE = 57376
const SWITCH = 57377
const CASE = 57378
const DEFAULT = 57379
const FALLTHROUGH = 57380
const FOR = 57381
const BREAK = 57382
const CONTINUE = 57383
const FUNC = 57384
const RETURN = 57385
const IMPORT = 57386
const TYPE = 57387
const STRUCT = 57388
const EOL = 57389
const NEG = 57390

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"INUM",
	"FNUM",
	"IDENTIFIER",
	"STRING_LITERAL",
	"PLUS",
	"MINUS",
	"ASTARISK",
	"SLASH",
	"PERCENT",
	"P_EQ",
	"M_EQ",
	"A_EQ",
	"S_EQ",
	"EQ",
	"NEQ",
	"GT",
	"GE",
	"LT",
	"LE",
	"AND",
	"OR",
	"INCR",
	"DECR",
	"ASSIGN",
	"VAR",
	"INT",
	"FLOAT",
	"STRING",
	"VOID",
	"IF",
	"ELSE",
	"SWITCH",
	"CASE",
	"DEFAULT",
	"FALLTHROUGH",
	"FOR",
	"BREAK",
	"CONTINUE",
	"FUNC",
	"RETURN",
	"IMPORT",
	"TYPE",
	"STRUCT",
	"EOL",
	"'('",
	"')'",
	"'{'",
	"'}'",
	"'['",
	"']'",
	"','",
	"':'",
	"';'",
	"'.'",
	"NEG",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line compiler/parser.go.y:172

func Parse(filename string, source string) int {

	err := &cm.ErrorHandler{ErrorCount: 0, WarningCount: 0}
	driver = new(vm.Driver)
	driver.Init(filename, err)

	// パース処理
	lexer = &Lexer{src: source, position: 0, readPosition: 0, line: 1, filename: filename, err: err}
	yyParse(lexer)

	fmt.Println("Parse End.")

	// パース結果出力
	driver.Dump()

	return 0
}

// 外部用
func GetErrorCount() int {
	return driver.Err.ErrorCount
}
func GetWarningCount() int {
	return driver.Err.WarningCount
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 87,
	17, 0,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	-2, 38,
	-1, 88,
	17, 0,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	-2, 39,
	-1, 89,
	17, 0,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	-2, 40,
	-1, 90,
	17, 0,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	-2, 41,
	-1, 91,
	17, 0,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	-2, 42,
	-1, 92,
	17, 0,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	-2, 43,
}

const yyPrivate = 57344

const yyLast = 217

var yyAct = [...]int{
	44, 12, 60, 61, 62, 63, 64, 39, 75, 76,
	11, 65, 66, 67, 68, 69, 70, 71, 72, 58,
	59, 29, 101, 27, 74, 73, 7, 102, 28, 76,
	25, 26, 78, 24, 56, 49, 25, 26, 47, 24,
	6, 49, 103, 98, 41, 3, 34, 35, 36, 37,
	77, 20, 79, 80, 81, 100, 19, 14, 15, 16,
	52, 82, 83, 84, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 51, 53, 95, 97, 10, 42,
	51, 48, 99, 54, 13, 55, 14, 15, 16, 14,
	15, 16, 18, 58, 59, 22, 60, 61, 62, 63,
	64, 104, 22, 105, 106, 65, 66, 67, 68, 69,
	70, 71, 72, 58, 59, 25, 26, 47, 24, 9,
	49, 38, 5, 60, 61, 62, 63, 64, 62, 63,
	64, 21, 4, 25, 26, 57, 24, 1, 23, 52,
	58, 59, 96, 58, 59, 31, 32, 2, 17, 8,
	40, 46, 30, 50, 53, 45, 43, 33, 42, 51,
	60, 61, 62, 63, 64, 0, 0, 0, 0, 65,
	66, 67, 68, 69, 70, 71, 72, 58, 59, 60,
	61, 62, 63, 64, 0, 0, 0, 0, 65, 66,
	67, 68, 69, 70, 71, 0, 58, 59, 60, 61,
	62, 63, 64, 0, 0, 0, 0, 65, 66, 67,
	68, 69, 70, 0, 0, 58, 59,
}

var yyPact = [...]int{
	-2, -2, -1000, -1000, -1000, -1000, 113, 72, -1000, -38,
	57, 50, 24, 129, -1000, -1000, -1000, -26, -1000, 60,
	129, -1000, -1000, 141, -1000, -1000, -1000, 17, 50, -1000,
	-1000, -1000, -1000, -43, -1000, -1000, -1000, -1000, -1000, 111,
	32, -1000, -1000, -13, 88, -22, -23, -19, -1000, 26,
	-1000, 26, 47, 26, -1000, -1000, -1000, -1000, -1000, -1000,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, -1000, -1000, 26, 26, -1000, -39, -6,
	28, 152, 118, 118, 68, 68, 68, 115, 115, 115,
	115, 115, 115, 190, 171, 152, -27, 152, -1000, 15,
	26, -1000, 26, 26, 152, 152, 152,
}

var yyPgo = [...]int{
	0, 1, 157, 44, 0, 156, 81, 155, 131, 153,
	151, 150, 92, 148, 142, 137, 147, 132, 122,
}

var yyR1 = [...]int{
	0, 15, 15, 16, 16, 16, 18, 18, 18, 17,
	13, 13, 12, 12, 11, 11, 3, 3, 3, 3,
	3, 7, 7, 7, 10, 10, 5, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 9, 14, 14,
	14, 8, 8, 8, 6, 6, 6, 1, 1, 1,
	2, 2, 2, 2, 2,
}

var yyR2 = [...]int{
	0, 1, 2, 1, 1, 1, 3, 5, 4, 9,
	1, 3, 0, 2, 1, 2, 1, 2, 2, 2,
	2, 3, 5, 4, 1, 2, 3, 1, 2, 1,
	1, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 0, 1,
	3, 1, 2, 2, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -15, -16, 47, -17, -18, 42, 28, -16, 6,
	6, 48, -1, 27, 29, 30, 31, -13, -12, 6,
	27, -8, -6, 9, 7, 4, 5, 49, 54, -1,
	-8, 4, 5, -2, 29, 30, 31, 32, -12, 50,
	-11, -3, 47, -5, -4, -7, -10, 6, -6, 9,
	-9, 48, 28, 43, 51, -3, 47, 47, 25, 26,
	8, 9, 10, 11, 12, 17, 18, 19, 20, 21,
	22, 23, 24, 47, 47, 27, 48, -4, 6, -4,
	6, -4, -4, -4, -4, -4, -4, -4, -4, -4,
	-4, -4, -4, -4, -4, -4, -14, -4, 49, -1,
	27, 49, 54, 27, -4, -4, -4,
}

var yyDef = [...]int{
	0, -2, 1, 3, 4, 5, 0, 0, 2, 0,
	0, 12, 6, 0, 57, 58, 59, 0, 10, 0,
	0, 8, 51, 0, 54, 55, 56, 60, 12, 13,
	7, 52, 53, 0, 61, 62, 63, 64, 11, 0,
	0, 14, 16, 0, 0, 0, 0, 29, 27, 0,
	30, 0, 0, 24, 9, 15, 17, 18, 31, 32,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 19, 20, 0, 48, 28, 29, 0,
	0, 25, 33, 34, 35, 36, 37, -2, -2, -2,
	-2, -2, -2, 44, 45, 26, 0, 49, 46, 21,
	0, 47, 0, 0, 23, 50, 22,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	48, 49, 3, 3, 54, 3, 57, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 55, 56,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 52, 3, 53, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 50, 3, 51,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 58,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:78
		{
			n := &ast.NodeDecl{Name: yyDollar[2].sval, VarType: yyDollar[3].ival, Node: ast.Node{Lineno: lexer.line, Driver: driver}}
			n.Push()
		}
	case 7:
		yyDollar = yyS[yypt-5 : yypt+1]
//line compiler/parser.go.y:79
		{
			n := &ast.NodeDecl{Name: yyDollar[2].sval, VarType: yyDollar[3].ival, Node: ast.Node{Lineno: lexer.line, Right: yyDollar[5].node, Driver: driver}}
			n.Push()
		}
	case 8:
		yyDollar = yyS[yypt-4 : yypt+1]
//line compiler/parser.go.y:80
		{
			n := &ast.NodeDecl{Name: yyDollar[2].sval, VarType: cm.TYPE_UNKNOWN, Node: ast.Node{Lineno: lexer.line, Right: yyDollar[4].node, Driver: driver}}
			n.Push()
		}
	case 9:
		yyDollar = yyS[yypt-9 : yypt+1]
//line compiler/parser.go.y:83
		{
			driver.AddFunction(lexer.line, yyDollar[6].ival, yyDollar[2].sval, yyDollar[4].argList, yyDollar[8].stateBlock)
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:86
		{
			yyVAL.argList = []*vm.Argument{yyDollar[1].argument}
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:87
		{
			yyVAL.argList = append(yyDollar[1].argList, yyDollar[3].argument)
		}
	case 12:
		yyDollar = yyS[yypt-0 : yypt+1]
//line compiler/parser.go.y:90
		{
			yyVAL.argument = nil
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:91
		{
			yyVAL.argument = &vm.Argument{Name: yyDollar[1].sval, VarType: yyDollar[2].ival}
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:94
		{
			s := new(ast.StateBlock)
			yyVAL.stateBlock = s.AddStates(yyDollar[1].node)
		}
	case 15:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:95
		{
			yyVAL.stateBlock = yyDollar[1].stateBlock.AddStates(yyDollar[2].node)
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:98
		{
			yyVAL.node = nil
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:99
		{
			yyVAL.node = yyDollar[1].node
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:100
		{
			yyVAL.node = yyDollar[1].node
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:101
		{
			yyVAL.node = yyDollar[1].node
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:102
		{
			yyVAL.node = yyDollar[1].node
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:105
		{
			yyVAL.node = &ast.NodeDecl{Name: yyDollar[2].sval, VarType: yyDollar[3].ival, Node: ast.Node{Lineno: lexer.line, Driver: driver}}
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line compiler/parser.go.y:106
		{
			yyVAL.node = &ast.NodeDecl{Name: yyDollar[2].sval, VarType: yyDollar[3].ival, Node: ast.Node{Lineno: lexer.line, Right: yyDollar[5].node, Driver: driver}}
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line compiler/parser.go.y:107
		{
			yyVAL.node = &ast.NodeDecl{Name: yyDollar[2].sval, VarType: cm.TYPE_UNKNOWN, Node: ast.Node{Lineno: lexer.line, Right: yyDollar[4].node, Driver: driver}}
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:110
		{
			yyVAL.node = ast.MakeNodeReturn(nil, lexer.line, driver)
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:111
		{
			yyVAL.node = ast.MakeNodeReturn(yyDollar[2].node, lexer.line, driver)
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:115
		{
			varNode := ast.MakeNodeValue(lexer.line, yyDollar[1].sval, driver)
			yyVAL.node = ast.MakeNodeAssign(lexer.line, varNode, yyDollar[3].node, driver)
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:122
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[2].node, nil, ast.OP_NOT, driver)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:123
		{
			yyVAL.node = ast.MakeNodeValue(lexer.line, yyDollar[1].sval, driver)
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:124
		{
			yyVAL.node = yyDollar[1].node
		}
	case 31:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:125
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, nil, ast.OP_INCR, driver)
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:126
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, nil, ast.OP_DECR, driver)
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:127
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_ADD, driver)
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:128
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_SUB, driver)
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:129
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_MUL, driver)
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:130
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_DIV, driver)
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:131
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_MOD, driver)
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:132
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_EQUAL, driver)
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:133
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_NEQ, driver)
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:134
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_GT, driver)
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:135
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_GE, driver)
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:136
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_LT, driver)
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:137
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_LE, driver)
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:138
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_AND, driver)
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:139
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_OR, driver)
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:140
		{
			yyVAL.node = yyDollar[2].node
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line compiler/parser.go.y:143
		{
			yyVAL.node = ast.MakeNodeFunction(lexer.line, yyDollar[1].sval, yyDollar[3].nodes, driver)
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line compiler/parser.go.y:146
		{
			yyVAL.nodes = make([]vm.INode, 0)
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:147
		{
			yyVAL.nodes = []vm.INode{yyDollar[1].node}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:148
		{
			yyVAL.nodes = append(yyDollar[1].nodes, yyDollar[3].node)
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:152
		{
			yyVAL.node = ast.MakeIvalNode(lexer.line, -yyDollar[2].ival, driver)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:153
		{
			yyVAL.node = ast.MakeFvalNode(lexer.line, -yyDollar[2].fval, driver)
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:156
		{
			yyVAL.node = ast.MakeSvalNode(lexer.line, yyDollar[1].sval, driver)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:157
		{
			yyVAL.node = ast.MakeIvalNode(lexer.line, yyDollar[1].ival, driver)
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:158
		{
			yyVAL.node = ast.MakeFvalNode(lexer.line, yyDollar[1].fval, driver)
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:161
		{
			yyVAL.ival = cm.TYPE_INTEGER
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:162
		{
			yyVAL.ival = cm.TYPE_FLOAT
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:163
		{
			yyVAL.ival = cm.TYPE_STRING
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line compiler/parser.go.y:166
		{
			yyVAL.ival = cm.TYPE_VOID
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:167
		{
			yyVAL.ival = cm.TYPE_INTEGER
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:168
		{
			yyVAL.ival = cm.TYPE_FLOAT
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:169
		{
			yyVAL.ival = cm.TYPE_STRING
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:170
		{
			yyVAL.ival = cm.TYPE_VOID
		}
	}
	goto yystack /* stack new state and value */
}
