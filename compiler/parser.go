// Code generated by goyacc -o compiler/parser.go compiler/parser.go.y. DO NOT EDIT.

//line compiler/parser.go.y:1

// プログラムのヘッダを指定
package compiler

import __yyfmt__ "fmt"

//line compiler/parser.go.y:4

import (
	"fmt"
	"ks2/compiler/ast"
	cm "ks2/compiler/common"
	"ks2/compiler/vm"
)

var driver *vm.Driver
var lexer *Lexer

//line compiler/parser.go.y:17
type yySymType struct {
	yys  int
	ival int
	fval float32
	sval string

	node  vm.INode
	nodes []vm.INode

	argList  []*vm.Argument
	argument *vm.Argument

	stateBlock     vm.IStateBlock
	statement      vm.IStatement
	caseStatement  *ast.CaseStatement
	caseStatements []*ast.CaseStatement
}

const INUM = 57346
const FNUM = 57347
const IDENTIFIER = 57348
const STRING_LITERAL = 57349
const PLUS = 57350
const MINUS = 57351
const ASTARISK = 57352
const SLASH = 57353
const PERCENT = 57354
const P_EQ = 57355
const M_EQ = 57356
const A_EQ = 57357
const S_EQ = 57358
const MOD_EQ = 57359
const EQ = 57360
const NEQ = 57361
const GT = 57362
const GE = 57363
const LT = 57364
const LE = 57365
const AND = 57366
const OR = 57367
const INCR = 57368
const DECR = 57369
const ASSIGN = 57370
const VAR = 57371
const INT = 57372
const FLOAT = 57373
const STRING = 57374
const VOID = 57375
const IF = 57376
const ELSE = 57377
const SWITCH = 57378
const CASE = 57379
const DEFAULT = 57380
const FALLTHROUGH = 57381
const FOR = 57382
const BREAK = 57383
const CONTINUE = 57384
const FUNC = 57385
const RETURN = 57386
const IMPORT = 57387
const TYPE = 57388
const STRUCT = 57389
const SYSCALL = 57390
const EOL = 57391
const NEG = 57392

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"INUM",
	"FNUM",
	"IDENTIFIER",
	"STRING_LITERAL",
	"PLUS",
	"MINUS",
	"ASTARISK",
	"SLASH",
	"PERCENT",
	"P_EQ",
	"M_EQ",
	"A_EQ",
	"S_EQ",
	"MOD_EQ",
	"EQ",
	"NEQ",
	"GT",
	"GE",
	"LT",
	"LE",
	"AND",
	"OR",
	"INCR",
	"DECR",
	"ASSIGN",
	"VAR",
	"INT",
	"FLOAT",
	"STRING",
	"VOID",
	"IF",
	"ELSE",
	"SWITCH",
	"CASE",
	"DEFAULT",
	"FALLTHROUGH",
	"FOR",
	"BREAK",
	"CONTINUE",
	"FUNC",
	"RETURN",
	"IMPORT",
	"TYPE",
	"STRUCT",
	"SYSCALL",
	"EOL",
	"'('",
	"')'",
	"'{'",
	"'}'",
	"'['",
	"']'",
	"','",
	"':'",
	"';'",
	"'.'",
	"NEG",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line compiler/parser.go.y:285

func Parse(filename string, source string) int {

	err := &cm.ErrorHandler{ErrorCount: 0, WarningCount: 0}
	driver = new(vm.Driver)
	driver.Init(filename, err)

	// パース処理
	lexer = &Lexer{src: source, position: 0, readPosition: 0, line: 1, filename: filename, err: err}
	yyParse(lexer)

	// ラベル設定
	driver.LabelSettings()

	fmt.Println("Parse End.")

	// パース結果出力
	driver.Dump()

	return 0
}

// 外部用
func GetErrorCount() int {
	return driver.Err.ErrorCount
}
func GetWarningCount() int {
	return driver.Err.WarningCount
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 71,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 76,
	-1, 72,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 77,
	-1, 73,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 78,
	-1, 74,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 79,
	-1, 75,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 80,
	-1, 76,
	18, 0,
	19, 0,
	20, 0,
	21, 0,
	22, 0,
	23, 0,
	-2, 81,
	-1, 97,
	49, 30,
	52, 30,
	-2, 69,
	-1, 101,
	49, 35,
	-2, 70,
}

const yyPrivate = 57344

const yyLast = 489

var yyAct = [...]int{
	108, 32, 164, 91, 79, 33, 98, 84, 17, 145,
	99, 83, 177, 158, 111, 25, 102, 65, 112, 112,
	26, 165, 173, 63, 176, 28, 165, 143, 61, 87,
	16, 60, 27, 86, 65, 62, 7, 170, 7, 40,
	41, 42, 43, 152, 154, 9, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 8,
	156, 24, 80, 64, 82, 7, 150, 97, 18, 19,
	20, 101, 18, 19, 20, 136, 137, 138, 139, 140,
	141, 85, 3, 3, 22, 97, 11, 12, 13, 101,
	135, 115, 47, 48, 49, 36, 37, 109, 35, 23,
	30, 127, 15, 128, 130, 58, 59, 133, 58, 59,
	131, 44, 61, 142, 132, 45, 46, 47, 48, 49,
	110, 14, 2, 6, 10, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 148, 5, 4, 1, 38,
	21, 34, 96, 95, 80, 94, 153, 93, 151, 92,
	149, 157, 90, 89, 88, 171, 160, 166, 162, 167,
	129, 29, 134, 97, 178, 172, 174, 39, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 97,
	97, 97, 97, 101, 101, 101, 101, 115, 115, 179,
	180, 168, 144, 0, 146, 169, 45, 46, 47, 48,
	49, 0, 0, 0, 0, 0, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 159, 36, 37, 31,
	35, 0, 30, 36, 37, 109, 35, 0, 30, 155,
	0, 175, 0, 0, 0, 0, 163, 45, 46, 47,
	48, 49, 0, 0, 0, 0, 161, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 36, 37, 109,
	35, 38, 30, 34, 0, 0, 0, 38, 0, 34,
	0, 0, 45, 46, 47, 48, 49, 0, 0, 0,
	0, 0, 110, 0, 113, 0, 0, 102, 0, 106,
	58, 59, 107, 103, 104, 105, 0, 100, 0, 0,
	0, 38, 7, 34, 0, 0, 114, 45, 46, 47,
	48, 49, 0, 0, 0, 0, 0, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 45, 46, 47,
	48, 49, 0, 0, 0, 0, 0, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 0, 0, 0,
	0, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 45, 46, 47, 48, 49, 0, 0, 0,
	0, 65, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 36, 37, 109, 35, 0, 30, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 110, 0, 0,
	0, 0, 102, 0, 106, 0, 0, 107, 103, 104,
	105, 0, 100, 0, 0, 0, 38, 7, 34, 45,
	46, 47, 48, 49, 0, 0, 0, 0, 0, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 45,
	46, 47, 48, 49, 0, 0, 0, 0, 0, 50,
	51, 52, 53, 54, 55, 56, 0, 58, 59, 45,
	46, 47, 48, 49, 0, 0, 0, 0, 0, 50,
	51, 52, 53, 54, 55, 0, 0, 58, 59,
}

var yyPact = [...]int{
	16, 16, -1000, -1000, -13, -13, -13, -1000, 115, 96,
	-1000, -1000, -1000, -1000, -20, 42, 93, 33, -1000, -1000,
	-1000, -36, -1000, 42, 213, 9, 93, -1000, 421, -1000,
	213, -22, -1000, -1000, 213, -1000, -1000, -1000, -31, -35,
	-1000, -1000, -1000, -1000, -1000, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, -1000, -1000,
	-1000, 213, 354, 213, -1000, 378, 82, 82, 79, 79,
	79, 264, 264, 264, 264, 264, 264, 461, 441, -37,
	421, -1000, 229, 253, -1000, -1000, -13, -13, -13, -13,
	-13, -13, -13, -13, -13, -13, -13, -1000, -1000, -1000,
	213, -1000, 213, 91, -1000, -1000, 213, -1000, 421, 62,
	74, -1000, 213, -23, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 421, 319, -49,
	319, -1000, -1000, 299, 213, -1000, -1000, -1000, -1000, -1000,
	-1000, 38, 421, 213, 8, 213, -1000, -13, 421, 32,
	213, -38, -18, 188, -11, -1000, 213, 421, -1000, -1000,
	-1000, 219, -16, -1000, -1000, 213, 421, -35, -1000, -1000,
	-1000, -29, -1000, -45, 107, -1000, -1000, 378, 378, 378,
	378,
}

var yyPgo = [...]int{
	0, 8, 167, 162, 0, 161, 10, 5, 1, 6,
	160, 159, 2, 158, 155, 11, 7, 33, 29, 154,
	153, 152, 63, 3, 149, 147, 145, 143, 142, 84,
	140, 4, 138, 122, 81, 137, 136, 123, 44,
}

var yyR1 = [...]int{
	0, 32, 32, 33, 33, 33, 33, 36, 36, 37,
	35, 30, 30, 30, 29, 22, 15, 15, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	17, 18, 19, 20, 20, 21, 23, 23, 23, 10,
	10, 11, 11, 24, 24, 25, 26, 27, 27, 38,
	38, 13, 13, 12, 14, 28, 3, 3, 3, 3,
	3, 3, 9, 6, 6, 6, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 8, 8, 7, 7, 31,
	31, 31, 5, 5, 5, 1, 1, 1, 2, 2,
	2, 2, 2, 34,
}

var yyR2 = [...]int{
	0, 1, 2, 1, 2, 2, 2, 3, 5, 6,
	7, 0, 1, 3, 2, 3, 1, 2, 1, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 2, 1, 3, 5, 5, 1,
	1, 1, 1, 7, 3, 1, 1, 6, 7, 1,
	2, 1, 2, 4, 3, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 5, 4, 1, 2, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 4, 7, 0,
	1, 3, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -32, -33, -34, -35, -36, -37, 49, 43, 29,
	-33, -34, -34, -34, 6, 6, 50, -1, 30, 31,
	32, -30, -29, 6, 28, 51, 56, -1, -4, -5,
	9, 6, -8, -7, 50, 7, 4, 5, 48, -2,
	30, 31, 32, 33, -29, 8, 9, 10, 11, 12,
	18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
	-4, 50, -4, 54, -22, 52, -4, -4, -4, -4,
	-4, -4, -4, -4, -4, -4, -4, -4, -4, -31,
	-4, 51, -4, -15, -16, -34, -17, -18, -19, -20,
	-21, -23, -24, -25, -26, -27, -28, -8, -9, -6,
	44, -7, 34, 40, 41, 42, 36, 39, -4, 6,
	29, 51, 56, 55, 53, -16, -34, -34, -34, -34,
	-34, -34, -34, -34, -34, -34, -34, -4, -4, -10,
	-4, -9, -6, -4, -3, 28, 13, 14, 15, 16,
	17, 6, -4, 50, -22, 58, -22, 52, -4, -1,
	28, -31, 35, -4, -38, -34, 28, -4, 51, -22,
	-23, 58, -13, -34, -12, 37, -4, -11, -18, -17,
	53, -14, -12, 38, -4, -22, 53, 57, 57, -15,
	-15,
}

var yyDef = [...]int{
	0, -2, 1, 3, 0, 0, 0, 103, 0, 0,
	2, 4, 5, 6, 0, 0, 11, 7, 95, 96,
	97, 0, 12, 0, 0, 98, 0, 14, 8, 66,
	0, 68, 69, 70, 0, 92, 93, 94, 0, 9,
	99, 100, 101, 102, 13, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 86,
	67, 89, 0, 0, 10, 0, 71, 72, 73, 74,
	75, -2, -2, -2, -2, -2, -2, 82, 83, 0,
	90, 84, 0, 0, 16, 18, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -2, 31, 32,
	33, -2, 0, 0, 45, 46, 0, 55, 0, 68,
	0, 87, 0, 0, 15, 17, 19, 20, 21, 22,
	23, 24, 25, 26, 27, 28, 29, 34, 0, 0,
	0, 39, 40, 0, 0, 56, 57, 58, 59, 60,
	61, 0, 91, 89, 36, 0, 44, 0, 62, 63,
	0, 0, 0, 0, 0, 49, 0, 65, 88, 37,
	38, 0, 0, 50, 51, 0, 64, 0, 41, 42,
	47, 0, 52, 0, 0, 43, 48, 0, 0, 54,
	53,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	50, 51, 3, 3, 56, 3, 59, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 57, 58,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 54, 3, 55, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 52, 3, 53,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 60,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:106
		{
			driver.VariableTable.DefineInLocal(lexer.line, yyDollar[2].sval, yyDollar[3].ival)
		}
	case 8:
		yyDollar = yyS[yypt-5 : yypt+1]
//line compiler/parser.go.y:107
		{
			driver.Err.LogError(driver.Filename, lexer.line, cm.ERR_0026, "")
		}
	case 9:
		yyDollar = yyS[yypt-6 : yypt+1]
//line compiler/parser.go.y:110
		{
			driver.DecralateFunction(lexer.line, yyDollar[6].ival, yyDollar[2].sval, yyDollar[4].argList)
		}
	case 10:
		yyDollar = yyS[yypt-7 : yypt+1]
//line compiler/parser.go.y:113
		{
			driver.AddFunction(lexer.line, yyDollar[6].ival, yyDollar[2].sval, yyDollar[4].argList, yyDollar[7].statement)
		}
	case 11:
		yyDollar = yyS[yypt-0 : yypt+1]
//line compiler/parser.go.y:116
		{
			yyVAL.argList = make([]*vm.Argument, 0)
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:117
		{
			yyVAL.argList = []*vm.Argument{yyDollar[1].argument}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:118
		{
			yyVAL.argList = append(yyDollar[1].argList, yyDollar[3].argument)
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:121
		{
			yyVAL.argument = &vm.Argument{Name: yyDollar[1].sval, VarType: yyDollar[2].ival}
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:127
		{
			yyVAL.statement = ast.MakeCompoundStatement(yyDollar[2].stateBlock)
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:130
		{
			s := new(ast.StateBlock)
			yyVAL.stateBlock = s.AddStates(yyDollar[1].statement)
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:131
		{
			yyVAL.stateBlock = yyDollar[1].stateBlock.AddStates(yyDollar[2].statement)
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:134
		{
			yyVAL.statement = nil
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:135
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:136
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:137
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:138
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:139
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:140
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:141
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:142
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 27:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:143
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:144
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 29:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:145
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:148
		{
			yyVAL.statement = ast.MakeExprStatement(yyDollar[1].node, driver)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:151
		{
			yyVAL.statement = ast.MakeAssignStatement(yyDollar[1].node)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:154
		{
			yyVAL.statement = ast.MakeVarDefineStatement(yyDollar[1].node)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:157
		{
			yyVAL.statement = ast.MakeReturnStatement(nil, lexer.line, driver)
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:158
		{
			yyVAL.statement = ast.MakeReturnStatement(yyDollar[2].node, lexer.line, driver)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:161
		{
			yyVAL.statement = ast.MakeFunctionCallStatement(yyDollar[1].node, driver)
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:164
		{
			yyVAL.statement = ast.MakeIfStatement(yyDollar[2].node, yyDollar[3].statement, nil, lexer.line, driver)
		}
	case 37:
		yyDollar = yyS[yypt-5 : yypt+1]
//line compiler/parser.go.y:165
		{
			yyVAL.statement = ast.MakeIfStatement(yyDollar[2].node, yyDollar[3].statement, yyDollar[5].statement, lexer.line, driver)
		}
	case 38:
		yyDollar = yyS[yypt-5 : yypt+1]
//line compiler/parser.go.y:166
		{
			yyVAL.statement = ast.MakeIfStatement(yyDollar[2].node, yyDollar[3].statement, yyDollar[5].statement, lexer.line, driver)
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line compiler/parser.go.y:177
		{
			yyVAL.statement = ast.MakeForStatement(yyDollar[2].node, yyDollar[4].node, yyDollar[6].statement, yyDollar[7].statement, lexer.line, driver)
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:178
		{
			yyVAL.statement = ast.MakeWhileStatement(yyDollar[2].node, yyDollar[3].statement, lexer.line, driver)
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:181
		{
			yyVAL.statement = ast.MakeBreakStatement(lexer.line, driver)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:184
		{
			yyVAL.statement = ast.MakeContinueStatement(lexer.line, driver)
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line compiler/parser.go.y:187
		{
			yyVAL.statement = ast.MakeSwitchStatement(yyDollar[2].node, yyDollar[5].caseStatements, nil, lexer.line, driver)
		}
	case 48:
		yyDollar = yyS[yypt-7 : yypt+1]
//line compiler/parser.go.y:188
		{
			yyVAL.statement = ast.MakeSwitchStatement(yyDollar[2].node, yyDollar[5].caseStatements, yyDollar[6].statement, lexer.line, driver)
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:195
		{
			yyVAL.caseStatements = []*ast.CaseStatement{yyDollar[1].caseStatement}
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:196
		{
			yyVAL.caseStatements = append(yyDollar[1].caseStatements, yyDollar[2].caseStatement)
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line compiler/parser.go.y:199
		{
			yyVAL.caseStatement = ast.MakeCaseStatement(yyDollar[2].node, ast.MakeCompoundStatement(yyDollar[4].stateBlock), lexer.line, driver)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:202
		{
			yyVAL.statement = ast.MakeCompoundStatement(yyDollar[3].stateBlock)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:205
		{
			yyVAL.statement = ast.MakeFallThroughStatement(lexer.line, driver)
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:212
		{
			yyVAL.ival = ast.OP_ASSIGN
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:213
		{
			yyVAL.ival = ast.OP_ADD_ASSIGN
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:214
		{
			yyVAL.ival = ast.OP_SUB_ASSIGN
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:215
		{
			yyVAL.ival = ast.OP_MUL_ASSIGN
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:216
		{
			yyVAL.ival = ast.OP_DIV_ASSIGN
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:217
		{
			yyVAL.ival = ast.OP_MOD_ASSIGN
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:221
		{
			varNode := ast.MakeValueNode(lexer.line, yyDollar[1].sval, driver)
			yyVAL.node = ast.MakeAssign(lexer.line, varNode, yyDollar[3].node, yyDollar[2].ival, driver)
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:227
		{
			yyVAL.node = ast.MakeVarDefineNode(lexer.line, yyDollar[2].sval, yyDollar[3].ival, driver)
		}
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
//line compiler/parser.go.y:228
		{
			yyVAL.node = ast.MakeVarDefineNodeWithAssign(lexer.line, yyDollar[2].sval, yyDollar[3].ival, yyDollar[5].node, driver)
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line compiler/parser.go.y:229
		{
			yyVAL.node = ast.MakeVarDefineNodeWithAssign(lexer.line, yyDollar[2].sval, cm.TYPE_UNKNOWN, yyDollar[4].node, driver)
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:233
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[2].node, nil, ast.OP_NOT, driver)
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:234
		{
			yyVAL.node = ast.MakeValueNode(lexer.line, yyDollar[1].sval, driver)
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:235
		{
			yyVAL.node = yyDollar[1].node
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:236
		{
			yyVAL.node = yyDollar[1].node
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:237
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_ADD, driver)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:238
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_SUB, driver)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:239
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_MUL, driver)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:240
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_DIV, driver)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:241
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_MOD, driver)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:242
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_EQUAL, driver)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:243
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_NEQ, driver)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:244
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_GT, driver)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:245
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_GE, driver)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:246
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_LT, driver)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:247
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_LE, driver)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:248
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_AND, driver)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:249
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, yyDollar[3].node, ast.OP_OR, driver)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:250
		{
			yyVAL.node = yyDollar[2].node
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:253
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, nil, ast.OP_INCR, driver)
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line compiler/parser.go.y:254
		{
			yyVAL.node = ast.MakeExprNode(lexer.line, yyDollar[1].node, nil, ast.OP_DECR, driver)
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
//line compiler/parser.go.y:257
		{
			yyVAL.node = ast.MakeFunctionNode(lexer.line, yyDollar[1].sval, yyDollar[3].nodes, driver)
		}
	case 88:
		yyDollar = yyS[yypt-7 : yypt+1]
//line compiler/parser.go.y:258
		{
			yyVAL.node = ast.MakeSysCallNode(lexer.line, yyDollar[3].node, yyDollar[6].nodes, driver)
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
//line compiler/parser.go.y:261
		{
			yyVAL.nodes = make([]vm.INode, 0)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:262
		{
			yyVAL.nodes = []vm.INode{yyDollar[1].node}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line compiler/parser.go.y:263
		{
			yyVAL.nodes = append(yyDollar[1].nodes, yyDollar[3].node)
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:266
		{
			yyVAL.node = ast.MakeSvalNode(lexer.line, yyDollar[1].sval, driver)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:267
		{
			yyVAL.node = ast.MakeIvalNode(lexer.line, yyDollar[1].ival, driver)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:268
		{
			yyVAL.node = ast.MakeFvalNode(lexer.line, yyDollar[1].fval, driver)
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:271
		{
			yyVAL.ival = cm.TYPE_INTEGER
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:272
		{
			yyVAL.ival = cm.TYPE_FLOAT
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:273
		{
			yyVAL.ival = cm.TYPE_STRING
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
//line compiler/parser.go.y:276
		{
			yyVAL.ival = cm.TYPE_VOID
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:277
		{
			yyVAL.ival = cm.TYPE_INTEGER
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:278
		{
			yyVAL.ival = cm.TYPE_FLOAT
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:279
		{
			yyVAL.ival = cm.TYPE_STRING
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line compiler/parser.go.y:280
		{
			yyVAL.ival = cm.TYPE_VOID
		}
	}
	goto yystack /* stack new state and value */
}
